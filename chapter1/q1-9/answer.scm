(define (inc n)
  (+ n 1))

(define (dec n)
  (- n 1))

(define (f1 a b)
  (if (= a 0)
      b
      (inc (+ (dec a) b))))

(define (f2 a b)
  (if (= a 0)
      b
      (+ (dec a) (inc b))))

; ---

(f1 4 5)
(f1 0 5)
(f1 4 0)
(f2 4 5)
(f2 0 5)
(f2 4 0)

; f1 は a を -1, b を +1 してから２つの項を足し算。
; f2 は a を -1, b を +1 してから２つの項を足し算。
; ２つの実装は、同じ演算を行っているが手続きが異なる。
;
; f1 は
;   (+ (+ (- a 1) b) 1)
; f2 は
;   (+ (- a 1) (+ b 1))
;
; f1 の評価プロセスは a = 4, b = 5 の場合
;   (f1 4 5)
;   (inc (+ (dec 4) 5))
;   (inc (+ (- 4 1) 5))
;   (inc (+ 3 5))
;   (inc 8)
;   (+ 8 1)
;   9
;
; f1 は (+ () 1) を実行し、次に (+ () b) を実行し、最後の (- a 1) に行き着くまで
; 遅延演算の列を作成している。
; 演算は、遅延演算の列が終わってから実行されている。
; よって f1 は、（再帰的手続きは使っていないが）再帰的プロセスである。
;
; f2 の評価プロセスは a = 4, b = 5 の場合
;   (f2 4 5)
;   (+ (dec 4) (inc 5))
;   (+ (- 4 1) (inc 5))
;   (+ 3 (inc 5))
;   (+ 3 (+ 5 1))
;   (+ 3 6)
;   (+ 9)
;
; + の被演算子第１項（dec 4）を評価し 3 という結果を得てから、
; 被演算子第２項（inc 5）を評価している。
; 段階的に実際の演算が発生し、第２項の演算中は、第１項の結果を保存しているわけだから
; 第１項は状態であると言えると思う。（明示的に変数は使っていなけれど、状態変数のようなもの）
; f2 は反復的プロセスである。
